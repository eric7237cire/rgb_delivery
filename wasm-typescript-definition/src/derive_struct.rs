use ::{ type_to_ts_string};
use serde_derive_internals::{ast, attr};
//use type_to_ts;
//use collapse_list_bracket;

use super::{ derive_field_str};

pub fn derive_struct(
    style: ast::Style,
    fields: Vec<ast::Field>,
    attr_container: &attr::Container,
) -> String {
    let mut extra_info = "".to_string();

    let tokens = match style {
        ast::Style::Struct => {
            let (f,ei) = derive_struct_named_fields(fields, attr_container);
            extra_info = ei;
            f
        },
        ast::Style::Newtype => {
            //assume its one field, create direct alias
            return format!( "export type {} = {};", attr_container.name().serialize_name(),
                         type_to_ts_string(&fields[0].ty).0);

        },
        ast::Style::Tuple => {

            derive_struct_tuple(fields, attr_container).to_string()

        },
        ast::Style::Unit => derive_struct_unit(attr_container).to_string(),
    };


   format!( "//generated by wasm-typescript-definition\nexport type {} = {{\n    {}\n}}{};",
            attr_container.name().serialize_name(), tokens, extra_info)



}


fn derive_struct_unit(_attr_container: &attr::Container) -> String {
    (quote!{
        {}
    }).to_string()
}

fn derive_struct_named_fields(
    fields: Vec<ast::Field>,
    _attr_container: &attr::Container,
) -> (String, String) {
    (
        fields.iter()
        .filter_map(| field| {
            if field.attrs.skip_serializing()  {
                None
            }
            else if field.attrs.flatten() {
                None
            }
            else {
                Some(derive_field_str(&field))
            }
        })
        .collect::<Vec<_>>().join(",\n    "),
    //get flattened types
    fields.into_iter()
        .filter_map(| field| {
            if field.attrs.flatten() {
                Some(format!(" & {}", type_to_ts_string(&field.ty).0))
            }
            else {
                None
            }
        })
        .collect::<Vec<_>>().join("")
    )
}

fn derive_struct_tuple(
    _fields: Vec<ast::Field>,
    _attr_container: &attr::Container,
) -> String {
    "derive_struct_tuple TODO".to_string()
    /*collapse_list_bracket(fields.into_iter()
        .map(|field| type_to_ts_string(field.ty).0)
        .collect::<Vec<_>>())*/
}
